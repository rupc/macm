#!/bin/bash
#알고리즘 문제 풀때 파일들 구조가 똑같고 같은 명령을 
#반복하기 귀찮기 때문에 쉘 스크립트로 자동적을 만들어준다
echo $1
prob=$1
if [ -z "$prob" ]
then
    echo "Enter the name of problem(or number)"
    echo "Usage : macm #PROBLEM_NUMBER"
    exit 1
fi

if [ -e "$prob" ]
then
    echo "Same problem already exists."
    exit 1
fi

mkdir "$prob"

CUR_DIR=$(pwd)
# code template generation section
TEM_DIR="$CUR_DIR/code-template"
no_temp=1
if [ -z "$TEM_DIR" ]
then
    echo "Template code doesn't exist"
    echo "Create file with empty content"
    no_temp = 0;
fi

# Generate cpp source file
if [ "$no_temp" = 0 ]
then
    touch "$prob"/"$prob".cpp
else
    # copy template code to the problem folder
    cp $TEM_DIR/cpp-template.cpp ./"$prob"/
    # Change the name of template source to problem.extension
    mv "$CUR_DIR"/"$prob"/cpp-template.cpp "$CUR_DIR"/"$prob"/"$prob".cpp
fi

# Create binary folder if it doesn't exist
if [ ! -d $CUR_DIR/abin ]; then
    echo "binary directory created"
    mkdir $CUR_DIR/abin
fi

# Generate input file, execute file and samples
touch "$CUR_DIR"/"$prob"/"$prob".in
touch "$CUR_DIR"/"$prob"/res
touch "$CUR_DIR"/"$prob"/samples
chmod +x $CUR_DIR/"$prob"/res

# acm problem binary 
executable="abin"
extension=".cpp"
# -g : gdb debbuing info
# -pg : gprof profiling info
cflags="-std=c++14 -Wall -O2 -g -pg -DACMICPC -DDEBUG"
cxx="g++"
obj_loc=$CUR_DIR/abin/$prob
target=$prob
echo -n "g++ -o $CUR_DIR/abin/$prob $prob" >> "$CUR_DIR"/"$prob"/res
echo "$extension $cflags" >> "$CUR_DIR"/"$prob"/res
echo "chmod +x $CUR_DIR"/abin/"$prob" >> "$CUR_DIR"/"$prob"/res
echo "$CUR_DIR/abin/$prob < $prob.in" >> "$CUR_DIR"/"$prob"/res
#compile_cmd="g++ "
#printf "$cxx -o $obj_loc $prob$extension $cflags"

echo Lets solve $prob && cd $CUR_DIR/$prob

